name: Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build assets for'
        required: true

jobs:
  build-lsp-server:
    name: Build LSP Server
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: phpcs-lsp-server-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: phpcs-lsp-server-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: phpcs-lsp-server-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: phpcs-lsp-server-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: phpcs-lsp-server-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary_name: phpcs-lsp-server-windows-arm64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build LSP Server
        run: |
          cd lsp-server
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp lsp-server/target/${{ matrix.target }}/release/phpcs-lsp-server.exe ${{ matrix.binary_name }}
          else
            cp lsp-server/target/${{ matrix.target }}/release/phpcs-lsp-server ${{ matrix.binary_name }}
          fi

      - name: Create archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ${{ matrix.binary_name }}.zip ${{ matrix.binary_name }}
            echo "ASSET_PATH=${{ matrix.binary_name }}.zip" >> $GITHUB_ENV
          else
            tar -czf ${{ matrix.binary_name }}.tar.gz ${{ matrix.binary_name }}
            echo "ASSET_PATH=${{ matrix.binary_name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          asset_content_type: application/octet-stream

      - name: Upload to specific release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: ${{ env.ASSET_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}

  download-phars:
    name: Download and Package PHAR Files
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download PHPCS and PHPCBF PHARs
        run: |
          # Download latest stable PHPCS
          curl -L https://github.com/squizlabs/PHP_CodeSniffer/releases/latest/download/phpcs.phar -o phpcs.phar
          curl -L https://github.com/squizlabs/PHP_CodeSniffer/releases/latest/download/phpcbf.phar -o phpcbf.phar
          
          # Make them executable
          chmod +x phpcs.phar phpcbf.phar
          
          # Verify they work
          php phpcs.phar --version
          php phpcbf.phar --version

      - name: Create PHAR archives
        run: |
          tar -czf phpcs.phar.tar.gz phpcs.phar
          tar -czf phpcbf.phar.tar.gz phpcbf.phar

      - name: Upload PHPCS PHAR
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: phpcs.phar.tar.gz
          asset_name: phpcs.phar.tar.gz
          asset_content_type: application/gzip

      - name: Upload PHPCBF PHAR
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: phpcbf.phar.tar.gz
          asset_name: phpcbf.phar.tar.gz
          asset_content_type: application/gzip

      - name: Upload PHARs to specific release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            phpcs.phar.tar.gz
            phpcbf.phar.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}